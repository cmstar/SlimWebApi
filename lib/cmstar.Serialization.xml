<?xml version="1.0"?>
<doc>
    <assembly>
        <name>cmstar.Serialization</name>
    </assembly>
    <members>
        <member name="M:cmstar.RapidReflection.Emit.ConstructorInvokerGenerator.CreateDelegate(System.Type)">
            <summary>
            Creates a dynamic method for creating instances of the given type.
            The given type must have a public parameterless constructor.
            </summary>
            <param name="type">The type of the instances to be created.</param>
            <returns>
            A dynamic method for creating instances of the given type.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            The given type is an interface, or is abstract, 
            or does not have a public parameterless constructor.
            </exception>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.ConstructorInvokerGenerator.CreateDelegate(System.Reflection.ConstructorInfo)">
            <summary>
            Creates a dynamic method for creating instances from the given <see cref="T:System.Reflection.ConstructorInfo"/>.
            </summary>
            <param name="constructorInfo">The constructor from which instances will be created.</param>
            <returns>
            A dynamic method for creating instances from the given constructor, the method receives an
            array as the arguments of the constructor.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constructorInfo"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The declaring type of the construcor is abstract.
            </exception>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.ConstructorInvokerGenerator.CreateDelegate(System.Reflection.ConstructorInfo,System.Boolean)">
            <summary>
            Creates a dynamic method for creating instances from the given <see cref="T:System.Reflection.ConstructorInfo"/>
            and indicates whether to perform a arguments validation in the dynamic method.
            </summary>
            <param name="constructorInfo">The constructor from which instances will be created.</param>
            <param name="validateArguments">
            If <c>true</c>, the dynamic method will validate if the array of arguments is null
            and check the length of the array to avoid the exceptions such as 
            <see cref="T:System.NullReferenceException"/> or <see cref="T:System.IndexOutOfRangeException"/>,
            an <see cref="T:System.ArgumentNullException"/> or <see cref="T:System.ArgumentException"/> will be thrown instead.
            </param>
            <returns>
            A dynamic method for creating instances from the given constructor, the method receives an
            array as the arguments of the constructor.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="constructorInfo"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The declaring type of the construcor is abstract.
            </exception>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.EmitUtils.CreateDynamicMethod(System.String,System.Type,System.Type[],System.Type)">
            <summary>
            Creates an instance of <see cref="T:System.Reflection.Emit.DynamicMethod"/>.
            </summary>
            <param name="methodName">The name of the dynamic method.</param>
            <param name="returnType">
            The return type of the dynamic method, null if the method has no return type.
            </param>
            <param name="parameterTypes">
            An array of <see cref="T:System.Type"/> specifying the types of the parameters of the dynamic method, 
            or null if the method has no parameters. 
            </param>
            <param name="owner">
            Specifies with which type the dynamic method is to be logically associated,
            if the type is an interface, the dynamic method will be associated to the module.
            </param>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.EmitUtils.BoxIfNeeded(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Performs a boxing operation if the given type is a value type.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="type">The type.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.EmitUtils.UnBoxIfNeeded(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Performs a unboxing operation (unbox.any) if the given type is a value type.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="type">The type.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.EmitUtils.CallMethod(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Calls the method indicated by the passed method descriptor.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="methodInfo">The method descriptor.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.EmitUtils.CastValue(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Casts an object or value type passed by reference to the specified type
            and pushes the result onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="targetType">The type.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.EmitUtils.CastReference(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Casts an object or value type passed by reference to the specified type
            and pushes the object reference or the value type pointer of the result
            onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="targetType">The type.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.EmitUtils.LoadArgument(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
            Loads the argument at the specified index onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index">The index.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.EmitUtils.LoadArgumentAddress(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
            Loads the address of the argument at the specified index onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index"></param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.EmitUtils.LoadInt32(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Pushes the integer value onto the evaluation stack as an int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="i">The integer value.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.EmitUtils.LoadLocalVariable(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
            Loads the local variable at the specified index onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index">The index of the local variable.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.EmitUtils.LoadLocalVariableAddress(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
            Loads the address of the local variable at a specific index onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index">The index of the local variable.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.EmitUtils.ThrowArgumentsNullExcpetion(System.Reflection.Emit.ILGenerator,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="paramName">The parameter name used to initialize the exception instance.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.EmitUtils.ThrowArgumentsExcpetion(System.Reflection.Emit.ILGenerator,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/>, specifying the message and the parameter name.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="message">The message.</param>
            <param name="paramName">The parameter name.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.FieldAccessorGenerator.CreateGetter(System.Reflection.FieldInfo)">
            <summary>
            Creates a dynamic method for getting the value of the given field.
            </summary>
            <param name="fieldInfo">
            The instance of <see cref="T:System.Reflection.FieldInfo"/> from which the dynamic method would be created.
            </param>
            <returns>
            A dynamic method for getting the value of the given field.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldInfo"/> is null.</exception>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.FieldAccessorGenerator.CreateGetter``2(System.Reflection.FieldInfo)">
            <summary>
            Creates a dynamic method for getting the value of the given field.
            </summary>
            <typeparam name="TSource">The type of the intance from which to get the value.</typeparam>
            <typeparam name="TRet">The type of the return value.</typeparam>
            <param name="fieldInfo">
            The instance of <see cref="T:System.Reflection.FieldInfo"/> from which the dynamic method would be created.
            </param>
            <returns>
            A dynamic method for getting the value of the given field.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldInfo"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <typeparamref name="TSource"/> is not <see cref="T:System.Object"/>, and from which 
            the declaring type of the field is not assignable.
            -or-
            <typeparamref name="TRet"/> is not assignable from the type of the field.
            </exception>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.FieldAccessorGenerator.CreateSetter(System.Reflection.FieldInfo)">
            <summary>
            Creates a dynamic method for setting the value of the given field.
            </summary>
            <param name="fieldInfo">
            The instance of <see cref="T:System.Reflection.FieldInfo"/> from which the dynamic method would be created.
            </param>
            <returns>
            A dynamic method for setting the value of the given field.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldInfo"/> is null.</exception>
            <remarks>
            In order to set a field on a value type succesfully, the value type must be boxed 
            in and <see cref="T:System.Object"/>, and unboxed from the object after the dynamic
            set mothod is called, e.g.
            <code>
              object boxedStruct = new SomeStruct();
              setter(s, "the value");
              SomeStruct unboxedStruct = (SomeStruct)boxedStruct;
            </code>
            </remarks>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.FieldAccessorGenerator.CreateSetter``2(System.Reflection.FieldInfo)">
            <summary>
            Creates a dynamic method for setting the value of the given field.
            </summary>
            <typeparam name="TTarget">The type of the instance the field belongs to.</typeparam>
            <typeparam name="TValue">The type of the field value to set.</typeparam>
            <param name="fieldInfo">
            The instance of <see cref="T:System.Reflection.FieldInfo"/> from which the dynamic method would be created.
            </param>
            <returns>
            A dynamic method for setting the value of the given field.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldInfo"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <typeparamref name="TTarget"/> is a value type.
            -or- 
            <typeparamref name="TTarget"/> is not <see cref="T:System.Object"/>, and from which 
            the declaring type of <paramref name="fieldInfo"/> is not assignable.
            -or-
            <typeparamref name="TValue"/> is not <see cref="T:System.Object"/>, and the type of field 
            is not assignable from <typeparamref name="TValue"/>.
            </exception>
            <remarks>
            In order to set a field on a value type succesfully, the value type must be boxed 
            in and <see cref="T:System.Object"/>, and unboxed from the object after the dynamic
            set mothod is called, e.g.
            <code>
              object boxedStruct = new SomeStruct();
              setter(s, "the value");
              SomeStruct unboxedStruct = (SomeStruct)boxedStruct;
            </code>
            </remarks>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.MethodInvokerGenerator.CreateDelegate(System.Reflection.MethodInfo)">
            <summary>
            Creates a dynamic method for invoking the method from the given <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <param name="methodInfo">
            The instance of <see cref="T:System.Reflection.MemberInfo"/> from which the dyanmic method is to be created.
            </param>
            <returns>
            The delegate has two parameters: the first for the object instance (will be ignored 
            if the method is static), and the second for the arguments of the method (will be 
            ignored if the method has no arguments)/
            The return value of the delegate will be <c>null</c> if the method has no return value.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="methodInfo"/> is null.</exception>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.MethodInvokerGenerator.CreateDelegate(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            Creates a dynamic method for invoking the method from the given <see cref="T:System.Reflection.MethodInfo"/>
            and indicates whether to perform a arguments validation in the dynamic method.
            </summary>
            <param name="methodInfo">
            The instance of <see cref="T:System.Reflection.MemberInfo"/> from which the dyanmic method is to be created.
            </param>
            <param name="validateArguments">
            If <c>true</c>, the dynamic method will validate if the instance or the array of arguments 
            is null and check the length of the array to avoid the exceptions such as 
            <see cref="T:System.NullReferenceException"/> or <see cref="T:System.IndexOutOfRangeException"/>,
            an <see cref="T:System.ArgumentNullException"/> or <see cref="T:System.ArgumentException"/> will be thrown instead.
            </param>
            <returns>
            The delegate has two parameters: the first for the object instance (will be ignored 
            if the method is static), and the second for the arguments of the method (will be 
            ignored if the method has no arguments)/
            The return value of the delegate will be <c>null</c> if the method has no return value.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="methodInfo"/> is null.</exception>
        </member>
        <member name="T:cmstar.RapidReflection.Emit.OpCodeExtention">
            <summary>
            Provides a set of extention methods for <see cref="T:System.Reflection.Emit.ILGenerator"/>
            for emitting the <see cref="T:System.Reflection.Emit.OpCode"/>s.
            </summary>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Bge(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction if the first value is greater than
            or equal to the second value.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="label">The label.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Bge_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction (short form) if the first value 
            is greater than or equal to the second value.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="label">The label.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Box(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Converts a value type to an object reference (type O).
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="type">The value type.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Br(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Unconditionally transfers control to a target instruction.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="label">The label.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Br_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Unconditionally transfers control to a target instruction (short form).
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="label">The label.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Brfalse(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction if value is <c>false</c>, 
            a null reference, or zero. 
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="label">The label.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Brfalse_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction (short form) if value is <c>false</c>, 
            a null reference, or zero. 
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="label">The label.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Brtrue(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction if value is <c>true</c>, 
            not null, or non-zero.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="label">The label.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Brtrue_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target instruction (short form) if value is <c>true</c>, 
            not null, or non-zero.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="label">The label.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Call(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Calls the method indicated by the passed method descriptor.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="methodInfo">The mechod to call.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Callvirt(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Calls a late-bound method on an object, pushing the return value onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="methodInfo">The mechod to call.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Castclass(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Attempts to cast an object passed by reference to the specified class.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="type">The target class.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Conv_I(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on top of the evaluation stack to native int.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Conv_I1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on top of the evaluation stack to int8, then extends (pads) it to int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Conv_I2(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on top of the evaluation stack to int16, then extends (pads) it to int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Conv_I4(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on top of the evaluation stack to int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Conv_I8(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on top of the evaluation stack to int64.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Initobj(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Initializes each field of the value type at a specified address to a null reference 
            or a 0 of the appropriate primitive type.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="type">The value type.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldarg_0(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the argument at index 0 onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldarg_1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the argument at index 1 onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldarg_2(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the argument at index 2 onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldarg_3(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the argument at index 3 onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldarg_S(System.Reflection.Emit.ILGenerator,System.Byte)">
            <summary>
            Loads the argument (referenced by a specified short form index) onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index">The index.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldarg(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
            Loads an argument (referenced by a specified index value) onto the stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index">The index.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldarga_S(System.Reflection.Emit.ILGenerator,System.Byte)">
            <summary>
            Load an argument address, in short form, onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index">The index.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldarga(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
            Load an argument address onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index">The index.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldfld(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            Finds the value of a field in the object whose reference is currently on the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="fieldInfo">The target field.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldc_I4_M1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of -1 onto the evaluation stack as an int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldc_I4_0(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of 0 onto the evaluation stack as an int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldc_I4_1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of 1 onto the evaluation stack as an int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldc_I4_2(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of 2 onto the evaluation stack as an int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldc_I4_3(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of 3 onto the evaluation stack as an int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldc_I4_4(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of 4 onto the evaluation stack as an int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldc_I4_5(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of 5 onto the evaluation stack as an int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldc_I4_6(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of 6 onto the evaluation stack as an int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldc_I4_7(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of 7 onto the evaluation stack as an int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldc_I4_8(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the integer value of 8 onto the evaluation stack as an int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldc_I4_S(System.Reflection.Emit.ILGenerator,System.Byte)">
            <summary>
            Pushes the supplied int8 value onto the evaluation stack as an int32, short form.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="value">The value.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldc_I4(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Pushes a supplied value of type int32 onto the evaluation stack as an int32.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="value">The value.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldc_I8(System.Reflection.Emit.ILGenerator,System.Int64)">
            <summary>
            Pushes a supplied value of type int64 onto the evaluation stack as an int64.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="value">The value.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldc_R4(System.Reflection.Emit.ILGenerator,System.Single)">
            <summary>
            Pushes a supplied value of type float32 onto the evaluation stack as type F (float).
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="value">The value.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldc_R8(System.Reflection.Emit.ILGenerator,System.Double)">
            <summary>
            Pushes a supplied value of type float64 onto the evaluation stack as type F (float).
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="value">The value.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldelem_Ref(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the element containing an object reference at a specified array index onto 
            the top of the evaluation stack as type O (object reference).
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldlen(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldloc_0(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the local variable at index 0 onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldloc_1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the local variable at index 1 onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldloc_2(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the local variable at index 2 onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldloc_3(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the local variable at index 3 onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldloc_S(System.Reflection.Emit.ILGenerator,System.Byte)">
            <summary>
            Loads the local variable at a specific index onto the evaluation stack, short form.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index">The index.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldloc_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Loads the local variable at a specific index onto the evaluation stack, short form.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="localBuilder">The instance of <see cref="T:System.Reflection.Emit.LocalBuilder"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldloc(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
            Loads the local variable at a specific index onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index">The index.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldloc(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Loads the local variable at a specific index onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="localBuilder">The instance of <see cref="T:System.Reflection.Emit.LocalBuilder"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldloca_S(System.Reflection.Emit.ILGenerator,System.Byte)">
            <summary>
            Loads the address of the local variable at a specific index onto
            the evaluation stack, short form.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index">The index.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldloca(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
            Loads the address of the local variable at a specific index onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index">The index.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldsfld(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            Pushes the value of a static field onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="fieldInfo">The static field.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ldstr(System.Reflection.Emit.ILGenerator,System.String)">
            <summary>
            Pushes a new object reference to a string literal stored in the metadata.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="value">The string.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Newobj(System.Reflection.Emit.ILGenerator,System.Reflection.ConstructorInfo)">
            <summary>
            Creates a new object or a new instance of a value type, pushing an object reference (type O) 
            onto the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="constructorInfo">The constructor of the type.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Ret(System.Reflection.Emit.ILGenerator)">
            <summary>
            Returns from the current method, pushing a return value (if present) from 
            the callee's evaluation stack onto the caller's evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Stfld(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            Replaces the value stored in the field of an object reference or pointer with a new value.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="fieldInfo">The target field.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Stloc_0(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it 
            in a the local variable list at index 0.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Stloc_1(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it 
            in a the local variable list at index 1.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Stloc_2(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it 
            in a the local variable list at index 2.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Stloc_3(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it 
            in a the local variable list at index 3.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Stloc_S(System.Reflection.Emit.ILGenerator,System.Byte)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it 
            in a the local variable list at index (short form).
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index">The index.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Stloc_S(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it 
            in a the local variable list at index (short form).
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="localBuilder">The instance of <see cref="T:System.Reflection.Emit.LocalBuilder"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Stloc(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it 
            in a the local variable list at a specified index.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="index">The index.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Stloc(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Pops the current value from the top of the evaluation stack and stores it 
            in a the local variable list at a specified index.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="localBuilder">The instance of <see cref="T:System.Reflection.Emit.LocalBuilder"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Stsfld(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            Replaces the value of a static field with a value from the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="fieldInfo">The static field.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Throw(System.Reflection.Emit.ILGenerator)">
            <summary>
            Throws the exception object currently on the evaluation stack.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Unbox(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Converts the boxed representation of a value type to its unboxed form.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="type">The value type.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.OpCodeExtention.Unbox_Any(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Converts the boxed representation of a type specified 
            in the instruction to its unboxed form.
            </summary>
            <param name="il">The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</param>
            <param name="type">The type.</param>
            <returns>The instance of <see cref="T:System.Reflection.Emit.ILGenerator"/>.</returns>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.PropertyAccessorGenerator.CreateGetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates a dynamic method for getting the value of the given property.
            </summary>
            <param name="propertyInfo">
            The instance of <see cref="T:System.Reflection.PropertyInfo"/> from which the dynamic method would be created.
            </param>
            <returns>
            A dynamic method for getting the value of the given property.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyInfo"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            The property is an indexer.
            -or-
            The get accessor method from <paramref name="propertyInfo"/> cannot be retrieved.
            </exception>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.PropertyAccessorGenerator.CreateGetter(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Creates a dynamic method for getting the value of the given property.
            </summary>
            <param name="propertyInfo">
            The instance of <see cref="T:System.Reflection.PropertyInfo"/> from which the dynamic method would be created.
            </param>
            <param name="nonPublic">
            Indicates whether to use the non-public property getter method.
            </param>
            <returns>
            A dynamic method for getting the value of the given property.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyInfo"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            The property is an indexer.
            -or-
            The get accessor method from <paramref name="propertyInfo"/> cannot be retrieved.
            </exception>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.PropertyAccessorGenerator.CreateGetter``2(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Creates a dynamic method for getting the value of the given property.
            </summary>
            <typeparam name="TSource">The type of the intance from which to get the value.</typeparam>
            <typeparam name="TRet">The type of the return value.</typeparam>
            <param name="propertyInfo">
            The instance of <see cref="T:System.Reflection.PropertyInfo"/> from which the dynamic method would be created.
            </param>
            <param name="nonPublic">
            Indicates whether to use the non-public property getter method.
            </param>
            <returns>
            A dynamic method for getting the value of the given property.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyInfo"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            The property is an indexer.
            -or -
            The get accessor method from <paramref name="propertyInfo"/> cannot be retrieved.
            -or-
            <typeparamref name="TSource"/> is not <see cref="T:System.Object"/>, and from which 
            the declaring type the property is not assignable.
            -or-
            <typeparamref name="TRet"/> is not assignable from the property type.
            </exception>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.PropertyAccessorGenerator.CreateSetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates a dynamic method for setting the value of the given property.
            </summary>
            <param name="propertyInfo">
            The instance of <see cref="T:System.Reflection.PropertyInfo"/> from which the dynamic method would be created.
            </param>
            <returns>
            A dynamic method for setting the value of the given property.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyInfo"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            The property is an indexer.
            -or-
            The set accessor method from the <paramref name="propertyInfo"/> cannot be retrieved.
            </exception>
            <remarks>
            In order to set a property value on a value type succesfully, the value type must be boxed 
            in and <see cref="T:System.Object"/>, and unboxed from the object after the dynamic
            set mothod is called, e.g.
            <code>
              object boxedStruct = new SomeStruct();
              setter(s, "the value");
              SomeStruct unboxedStruct = (SomeStruct)boxedStruct;
            </code>
            </remarks>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.PropertyAccessorGenerator.CreateSetter(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Creates a dynamic method for setting the value of the given property.
            </summary>
            <param name="propertyInfo">
            The instance of <see cref="T:System.Reflection.PropertyInfo"/> from which the dynamic method would be created.
            </param>
            <param name="nonPublic">
            Indicates whether to use the non-public property setter method.
            </param>
            <returns>
            A dynamic method for setting the value of the given property.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyInfo"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            The property is an indexer.
            -or-
            The set accessor method from the <paramref name="propertyInfo"/> cannot be retrieved.
            </exception>
            <remarks>
            In order to set a property value on a value type succesfully, the value type must be boxed 
            in and <see cref="T:System.Object"/>, and unboxed from the object after the dynamic
            set mothod is called, e.g.
            <code>
              object boxedStruct = new SomeStruct();
              setter(s, "the value");
              SomeStruct unboxedStruct = (SomeStruct)boxedStruct;
            </code>
            </remarks>
        </member>
        <member name="M:cmstar.RapidReflection.Emit.PropertyAccessorGenerator.CreateSetter``2(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Creates a dynamic method for setting the value of the given property.
            </summary>
            <typeparam name="TTarget">The type of the instance the property belongs to.</typeparam>
            <typeparam name="TValue">The type of the value to set.</typeparam>
            <param name="propertyInfo">
            The instance of <see cref="T:System.Reflection.PropertyInfo"/> from which the dynamic method would be created.
            </param>
            <param name="nonPublic">
            Indicates whether to use the non-public property setter method.
            </param>
            <returns>
            A dynamic method for setting the value of the given property.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyInfo"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            The property is an indexer.
            -or-
            The set accessor method from the <paramref name="propertyInfo"/> cannot be retrieved.
            -or-
            <typeparamref name="TTarget"/> is a value type.
            -or-
            <typeparamref name="TTarget"/> is not <see cref="T:System.Object"/>, and from which 
            the declaring type of <paramref name="propertyInfo"/> is not assignable.
            -or-
            <typeparamref name="TValue"/> is not <see cref="T:System.Object"/>, and the type of property 
            is not assignable from <typeparamref name="TValue"/>. 
            </exception>
            <remarks>
            In order to set a property value on a value type succesfully, the value type must be boxed 
            in and <see cref="T:System.Object"/>, and unboxed from the object after the dynamic
            set mothod is called, e.g.
            <code>
              object boxedStruct = new SomeStruct();
              setter(s, "the value");
              SomeStruct unboxedStruct = (SomeStruct)boxedStruct;
            </code>
            </remarks>
        </member>
        <member name="T:cmstar.Serialization.Formatting">
            <summary>
            Specifies the format used by the <see cref="T:cmstar.Serialization.IndentedTextWriter"/>。
            </summary>
        </member>
        <member name="F:cmstar.Serialization.Formatting.None">
            <summary>
            No special format.
            </summary>
        </member>
        <member name="F:cmstar.Serialization.Formatting.Multiple">
            <summary>
            Allows multiple line format without indentation.
            </summary>
        </member>
        <member name="F:cmstar.Serialization.Formatting.Indented">
            <summary>
            Multiple line with indentation according to
            the <see cref="P:cmstar.Serialization.IndentedTextWriter.IndentLevel"/> property.
            </summary>
        </member>
        <member name="T:cmstar.Serialization.Json.Contracts.ContractMemberCollection">
            <summary>
            A key-value map which takes the property names as the keys and instances of
            the <see cref="T:cmstar.Serialization.Json.Contracts.ContractMemberInfo"/> as the values.
            </summary>
        </member>
        <member name="T:cmstar.Serialization.Json.Contracts.DictionaryContract">
            <summary>
            The contract for dictonaries.
            It maps the key-value pairs in the dictionary to JSON properties.
            </summary>
        </member>
        <member name="T:cmstar.Serialization.Json.JsonContract">
            <summary>
            A contract that specifies how to serialize/deserialize JSONs.
            This is an abstract class.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:cmstar.Serialization.Json.JsonContract"/>
            with the given underlying type.
            </summary>
            <param name="type">The underlying type.</param>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonContract.Write(cmstar.Serialization.Json.JsonWriter,cmstar.Serialization.Json.JsonSerializingState,cmstar.Serialization.Json.IJsonContractResolver,System.Object)">
            <summary>
            Writes the JSON represents the given object to the <see cref="T:cmstar.Serialization.Json.JsonWriter"/>.
            </summary>
            <param name="writer">
            The instance of <see cref="T:cmstar.Serialization.Json.JsonWriter"/> the JSON will be written to.
            </param>
            <param name="state">
            A instance of <see cref="T:cmstar.Serialization.Json.JsonSerializingState"/> that may contains some 
            options for serializing.
            </param>
            <param name="contractResolver">
            A <see cref="T:cmstar.Serialization.Json.IJsonContractResolver"/> which is used to resolve
            <see cref="T:cmstar.Serialization.Json.JsonContract"/>s during the serialization.
            </param>
            <param name="obj">
            The object for generating the JSON. 
            </param>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonContract.Read(cmstar.Serialization.Json.JsonReader,cmstar.Serialization.Json.JsonDeserializingState)">
            <summary>
            Read the JSON represents a intance of the <see cref="P:cmstar.Serialization.Json.JsonContract.UnderlyingType"/> from
            the <see cref="T:cmstar.Serialization.Json.JsonReader"/>.
            </summary>
            <param name="reader">
            The instance of <see cref="T:cmstar.Serialization.Json.JsonReader"/> the JSON will be read from.
            </param>
            <param name="state">
            A instance of <see cref="T:cmstar.Serialization.Json.JsonDeserializingState"/> that may contains some 
            options for deserializing.
            </param>
            <returns>An intance of the <see cref="P:cmstar.Serialization.Json.JsonContract.UnderlyingType"/>.</returns>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonContract.DoWrite(cmstar.Serialization.Json.JsonWriter,cmstar.Serialization.Json.JsonSerializingState,cmstar.Serialization.Json.IJsonContractResolver,System.Object)">
            <summary>
            Performs the writing.
            This method will be called by the <see cref="M:cmstar.Serialization.Json.JsonContract.Write(cmstar.Serialization.Json.JsonWriter,cmstar.Serialization.Json.JsonSerializingState,cmstar.Serialization.Json.IJsonContractResolver,System.Object)"/> method.
            </summary>
            <param name="writer">
            The instance of <see cref="T:cmstar.Serialization.Json.JsonWriter"/> the JSON will be written to.
            </param>
            <param name="state">
            A instance of <see cref="T:cmstar.Serialization.Json.JsonSerializingState"/> that may contains some 
            options for serializing.
            </param>
            <param name="contractResolver">
            A <see cref="T:cmstar.Serialization.Json.IJsonContractResolver"/> which is used to resolve
            <see cref="T:cmstar.Serialization.Json.JsonContract"/>s during the serialization.
            </param>
            <param name="obj">
            The object for generating the JSON. 
            </param>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonContract.DoRead(cmstar.Serialization.Json.JsonReader,cmstar.Serialization.Json.JsonDeserializingState)">
            <summary>
            Performs the reading.
            This method will be called by the <see cref="M:cmstar.Serialization.Json.JsonContract.Read(cmstar.Serialization.Json.JsonReader,cmstar.Serialization.Json.JsonDeserializingState)"/> method.
            </summary>
            <param name="reader">
            The instance of <see cref="T:cmstar.Serialization.Json.JsonReader"/> the JSON will be read from.
            </param>
            <param name="state">
            A instance of <see cref="T:cmstar.Serialization.Json.JsonDeserializingState"/> that may contains some 
            options for deserializing.
            </param>
            <returns>An intance of the <see cref="P:cmstar.Serialization.Json.JsonContract.UnderlyingType"/>.</returns>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonContract.SkipPropertyValue(cmstar.Serialization.Json.JsonReader)">
            <summary>
            Skip the property value at the current position on the reader.
            The method can only be called after a <see cref="F:cmstar.Serialization.Json.JsonToken.PropertyName"/> being read.
            </summary>
            <param name="reader">The instance of <see cref="T:cmstar.Serialization.Json.JsonReader"/>.</param>
        </member>
        <member name="P:cmstar.Serialization.Json.JsonContract.UnderlyingType">
            <summary>
            Gets the underlying type of the current <see cref="T:cmstar.Serialization.Json.JsonContract"/>.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.Json.Contracts.DictionaryContract.#ctor(System.Type)">
            <summary>
            Initializes an new instance of <see cref="T:cmstar.Serialization.Json.Contracts.DictionaryContract"/>
            with the given underlying type.
            </summary>
            <param name="type">The underlying type.</param>
        </member>
        <member name="P:cmstar.Serialization.Json.Contracts.DictionaryContract.ValueContract">
            <summary>
            Gets or sets the <see cref="T:cmstar.Serialization.Json.JsonContract"/> for the values in the dictionary.
            If the property is null, the <see cref="M:cmstar.Serialization.Json.JsonContract.Read(cmstar.Serialization.Json.JsonReader,cmstar.Serialization.Json.JsonDeserializingState)"/> method would throw an exception.
            </summary>
        </member>
        <member name="P:cmstar.Serialization.Json.Contracts.DictionaryContract.KeyConverter">
            <summary>
            Gets or sets the <see cref="T:System.ComponentModel.TypeConverter"/> for the keys in the dictionary.
            The converter is used to convert the key objects to/from strings in the
            JSON property names.
            If the property is null, the <see cref="T:cmstar.Serialization.Json.Contracts.DictionaryContract"/> will try to use 
            the default converter.
            </summary>
        </member>
        <member name="T:cmstar.Serialization.Json.JsonContractException">
            <summary>
            Represents the errors thrown by the implementations of <see cref="T:cmstar.Serialization.Json.JsonContract"/>.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonContractException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:cmstar.Serialization.Json.JsonContractException"/> class
            with a specified error message.
            </summary>
            <param name="message">The message that describe the error.</param>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonContractException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:cmstar.Serialization.Json.JsonContractException"/> class 
            with a specified error message and a reference to the inner exception 
            that is the cause of this exception.
            </summary>
            <param name="message">The message that describe the error.</param>
            <param name="innerException">The exception that is the cause of this exception.</param>
        </member>
        <member name="T:cmstar.Serialization.Json.JsonDeserializingState">
            <summary>
            Keeps the state for deserializing.
            </summary>
        </member>
        <member name="T:cmstar.Serialization.Json.JsonFormatException">
            <summary>
            The exception was thrown when the JSON format is not illegal.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonFormatException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:cmstar.Serialization.Json.JsonFormatException"/> with 
            with the given message that describes the error.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonFormatException.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:cmstar.Serialization.Json.JsonFormatException"/> with 
            with the given message that describes the error and specify the 
            position of the error in the JSON.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="lineNumber">
            The line number where the format error was found in the JSON.
            </param>
            <param name="columnNumber">
            The column number where the format error was found in the JSON.
            </param>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonFormatException.#ctor(System.String,cmstar.Serialization.Json.JsonToken,cmstar.Serialization.Json.JsonToken,cmstar.Serialization.Json.JsonToken)">
            <summary>
            Initializes a new instance of the <see cref="T:cmstar.Serialization.Json.JsonFormatException"/> with 
            with the given message that describes the error  and the 
            <see cref="T:cmstar.Serialization.Json.JsonToken"/>s of the current state.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="currentToken">
            The <see cref="T:cmstar.Serialization.Json.JsonToken"/> which was being read or written while 
            the exception was thrown.
            </param>
            <param name="lastToken">
            The lastest <see cref="T:cmstar.Serialization.Json.JsonToken"/> before the <paramref name="currentToken"/>.
            </param>
            <param name="containerToken">
            The <see cref="T:cmstar.Serialization.Json.JsonToken"/> represents the JSON container in which 
            the <see cref="P:cmstar.Serialization.Json.JsonFormatException.CurrentToken"/> was being read or written.
            </param>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonFormatException.#ctor(System.String,System.Int32,System.Int32,cmstar.Serialization.Json.JsonToken,cmstar.Serialization.Json.JsonToken,cmstar.Serialization.Json.JsonToken)">
            <summary>
            Initializes a new instance of the <see cref="T:cmstar.Serialization.Json.JsonFormatException"/> with 
            with the given message that describes the error, the position of the error
            in the JSON, and the <see cref="T:cmstar.Serialization.Json.JsonToken"/>s of the current state.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="lineNumber">
            The line number where the format error was found in the JSON.
            </param>
            <param name="columnNumber">
            The column number where the format error was found in the JSON.
            </param>
            <param name="currentToken">
            The <see cref="T:cmstar.Serialization.Json.JsonToken"/> which was being read or written while 
            the exception was thrown.
            </param>
            <param name="lastToken">
            The lastest <see cref="T:cmstar.Serialization.Json.JsonToken"/> before the <paramref name="currentToken"/>.
            </param>
            <param name="containerToken">
            The <see cref="T:cmstar.Serialization.Json.JsonToken"/> represents the JSON container in which 
            the <see cref="P:cmstar.Serialization.Json.JsonFormatException.CurrentToken"/> was being read or written.
            </param>
        </member>
        <member name="P:cmstar.Serialization.Json.JsonFormatException.LineNumber">
            <summary>
            Gets the line number where the format error was found in the JSON.
            Returns -1 if not specfied.
            </summary>
        </member>
        <member name="P:cmstar.Serialization.Json.JsonFormatException.ColumnNumber">
            <summary>
            Gets the column number where the format error was found in the JSON.
            Returns -1 if not specfied.
            </summary>
        </member>
        <member name="P:cmstar.Serialization.Json.JsonFormatException.CurrentToken">
            <summary>
            Gets or sets the <see cref="T:cmstar.Serialization.Json.JsonToken"/> which was being read or written
            while the exception was thrown.
            Returns <see cref="F:cmstar.Serialization.Json.JsonToken.None"/> if not specified.
            </summary>
        </member>
        <member name="P:cmstar.Serialization.Json.JsonFormatException.LastToken">
            <summary>
            Gets or sets the lastest <see cref="T:cmstar.Serialization.Json.JsonToken"/> before the <see cref="P:cmstar.Serialization.Json.JsonFormatException.CurrentToken"/>.
            Returns <see cref="F:cmstar.Serialization.Json.JsonToken.None"/> if not specified.
            </summary>
        </member>
        <member name="P:cmstar.Serialization.Json.JsonFormatException.ContainerToken">
            <summary>
            Gets or sets the <see cref="T:cmstar.Serialization.Json.JsonToken"/> represents the JSON container
            in which the <see cref="P:cmstar.Serialization.Json.JsonFormatException.CurrentToken"/> was being read or written.
            Returns <see cref="F:cmstar.Serialization.Json.JsonToken.None"/> if not specified.
            </summary>
        </member>
        <member name="T:cmstar.Serialization.Json.JsonContractResolver">
            <summary>
            The default implementation of <see cref="T:cmstar.Serialization.Json.IJsonContractResolver"/>.
            </summary>
        </member>
        <member name="T:cmstar.Serialization.Json.IJsonContractResolver">
            <summary>
            Represents a resolves that resolves <see cref="T:cmstar.Serialization.Json.JsonContract"/>s for types.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.Json.IJsonContractResolver.ResolveContract(System.Object)">
            <summary>
            Resolves the <see cref="T:cmstar.Serialization.Json.JsonContract"/> for the given object.
            </summary>
            <param name="obj">The object to resolve.</param>
            <returns>The instance of <see cref="T:cmstar.Serialization.Json.JsonContract"/> for the type.</returns>
        </member>
        <member name="M:cmstar.Serialization.Json.IJsonContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the <see cref="T:cmstar.Serialization.Json.JsonContract"/> for the given type.
            </summary>
            <param name="type">The type to resolve.</param>
            <returns>The instance of <see cref="T:cmstar.Serialization.Json.JsonContract"/> for the type.</returns>
        </member>
        <member name="F:cmstar.Serialization.Json.JsonContractResolver.SyncRoot">
            <summary>
            An object that can be used to synchronize access the cache of JSON contracts.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonContractResolver.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:cmstar.Serialization.Json.JsonContractResolver"/>.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonContractResolver.#ctor(System.Collections.Generic.IDictionary{System.Type,cmstar.Serialization.Json.JsonContract})">
            <summary>
            Initializes a new instance of <see cref="T:cmstar.Serialization.Json.JsonContractResolver"/>
            with a dictionary which contains some ready-made <see cref="T:cmstar.Serialization.Json.JsonContract"/>s.
            </summary>
            <param name="contracts">
            The dictionary which contains some ready-made <see cref="T:cmstar.Serialization.Json.JsonContract"/>s.
            </param>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonContractResolver.ResolveContract(System.Object)">
            <summary>
            Resolves the <see cref="T:cmstar.Serialization.Json.JsonContract"/> for the given object.
            </summary>
            <param name="obj">The object to resolve.</param>
            <returns>The instance of <see cref="T:cmstar.Serialization.Json.JsonContract"/> for the type.</returns>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the <see cref="T:cmstar.Serialization.Json.JsonContract"/> for the given type.
            </summary>
            <param name="type">The type to resolve.</param>
            <returns>The instance of <see cref="T:cmstar.Serialization.Json.JsonContract"/> for the type.</returns>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonContractResolver.DoResolve(System.Type)">
            <summary>
            Performs the contract resolving.
            Override this method to customize the resolving.
            </summary>
            <param name="type">The type to resolve.</param>
            <returns>The instance of <see cref="T:cmstar.Serialization.Json.JsonContract"/> for the type.</returns>
        </member>
        <member name="P:cmstar.Serialization.Json.JsonContractResolver.CaseSensitive">
            <summary>
            Indicates if the mappings between JSON property names and CLR type members (fields/properties)
            are case-sensitive. The default value is <c>true</c>.
            </summary>
        </member>
        <member name="T:cmstar.Serialization.Json.Contracts.ContractMemberInfo">
            <summary>
            Contains the data for the <see cref="T:cmstar.Serialization.Json.JsonSerializer"/> to serialize or access the value
            of a property or field from a CLR object.
            </summary>
        </member>
        <member name="P:cmstar.Serialization.Json.Contracts.ContractMemberInfo.Contract">
            <summary>
            Gets or sets the <see cref="T:cmstar.Serialization.Json.JsonContract"/> used to serialize this property/field.
            </summary>
        </member>
        <member name="P:cmstar.Serialization.Json.Contracts.ContractMemberInfo.Name">
            <summary>
            Gets the name of the property/field.
            </summary>
        </member>
        <member name="P:cmstar.Serialization.Json.Contracts.ContractMemberInfo.Type">
            <summary>
            Gets the property type or field type of the member.
            </summary>
        </member>
        <member name="P:cmstar.Serialization.Json.Contracts.ContractMemberInfo.JsonPropertyName">
            <summary>
            Gets or sets the property name in JSON of this property/field.
            </summary>
        </member>
        <member name="P:cmstar.Serialization.Json.Contracts.ContractMemberInfo.IsProperty">
            <summary>
            Indicates if the class member is a property.
            <c>true</c> if the member is a property; otherwise is a field.
            </summary>
        </member>
        <member name="P:cmstar.Serialization.Json.Contracts.ContractMemberInfo.MemberInfo">
            <summary>
            Gets the <see cref="P:cmstar.Serialization.Json.Contracts.ContractMemberInfo.MemberInfo"/> of this property/field.
            If <see cref="P:cmstar.Serialization.Json.Contracts.ContractMemberInfo.IsProperty"/> is true, <see cref="P:cmstar.Serialization.Json.Contracts.ContractMemberInfo.MemberInfo"/> is 
            an instance of <see cref="T:System.Reflection.PropertyInfo"/>; 
            otherwise an instance of <see cref="T:System.Reflection.FieldInfo"/>.
            </summary>
        </member>
        <member name="P:cmstar.Serialization.Json.Contracts.ContractMemberInfo.ValueGetter">
            <summary>
            Gets or sets the method for getting the value of the property or field.
            <c>null</c> if the getter is not available.
            </summary>
        </member>
        <member name="P:cmstar.Serialization.Json.Contracts.ContractMemberInfo.ValueSetter">
            <summary>
            Gets or sets the method for setting the value of the property or field.
            <c>null</c> if the setter is not available.
            </summary>
        </member>
        <member name="T:cmstar.Serialization.Json.Contracts.CustomFormatDateTimeContract">
            <summary>
            An extention of <see cref="T:cmstar.Serialization.Json.Contracts.DateTimeContract"/> that allows to specify
            the format for serializing the date.
            </summary>
        </member>
        <member name="T:cmstar.Serialization.Json.Contracts.DateTimeContract">
            <summary>
            The contract for <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.Json.Contracts.DateTimeContract.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:cmstar.Serialization.Json.Contracts.DateTimeContract"/>.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.Json.Contracts.DateTimeContract.TryParseDateTime(System.String,System.DateTime@)">
            <summary>
            Converts the specified string to <see cref="T:System.DateTime"/> and returns a value 
            that indicates whether the conversion succeeded.
            </summary>
            <param name="value">The string represents a <see cref="T:System.DateTime"/>.</param>
            <param name="dateTime">The result.</param>
            <returns>
            true if the string was converted successfully; otherwise false.
            </returns>
        </member>
        <member name="M:cmstar.Serialization.Json.Contracts.DateTimeContract.ToStringValue(System.DateTime)">
            <summary>
            Converts the specified <see cref="T:System.DateTime"/> to it's corresponding string representation.
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime"/>.</param>
            <returns>The string value represents the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="P:cmstar.Serialization.Json.Contracts.CustomFormatDateTimeContract.Format">
            <summary>
            Gets or sets a value which is used to format the date and time.
            The format string will be passed to the <see cref="M:System.DateTime.ToString"/>
            method during the serializing.
            </summary>
        </member>
        <member name="T:cmstar.Serialization.Json.Contracts.EnumContract">
            <summary>
            The contract for enumerations.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.Json.Contracts.EnumContract.#ctor(System.Type)">
            <summary>
            Initialize a new instance of <see cref="T:cmstar.Serialization.Json.Contracts.EnumContract"/>.
            </summary>
            <param name="type">The type of the enum.</param>
        </member>
        <member name="P:cmstar.Serialization.Json.Contracts.EnumContract.UseEnumName">
            <summary>
            Gets or sets a value, which specify whether to serializing a Enum by using it's name.
            If it is set to true, a Enum will be serialized to a JSON string with it's name;
            otherwise, will be serialized to a number with the index.
            The default value is false.
            </summary>
        </member>
        <member name="T:cmstar.Serialization.Json.Contracts.NullableTypeContract">
            <summary>
            The contract for <see cref="T:System.Nullable`1"/>.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.Json.Contracts.NullableTypeContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:cmstar.Serialization.Json.Contracts.NullableTypeContract"/>
            with the given underlying type.
            </summary>
            <param name="type">The underlying type.</param>
        </member>
        <member name="P:cmstar.Serialization.Json.Contracts.NullableTypeContract.UnderlyingTypeContract">
            <summary>
            Gets or sets the <see cref="T:cmstar.Serialization.Json.JsonContract"/> for 
            the underlying type of <see cref="T:System.Nullable`1"/>.
            </summary>
        </member>
        <member name="T:cmstar.Serialization.Json.Contracts.BooleanContract">
            <summary>
            The contract for boolean values.
            </summary>
        </member>
        <member name="T:cmstar.Serialization.Json.Contracts.ArrayContract">
            <summary>
            The contract for collections.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.Json.Contracts.ArrayContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:cmstar.Serialization.Json.Contracts.ArrayContract"/>
            with the type of the colletion.
            </summary>
            <param name="type">The type of the colletion.</param>
        </member>
        <member name="P:cmstar.Serialization.Json.Contracts.ArrayContract.ElementContract">
            <summary>
            Gets or sets the <see cref="T:cmstar.Serialization.Json.JsonContract"/> used by the type of elements in the array.
            If it is set to null, the contract will be resolved while elements are being written
            to the JSON.
            If <see cref="P:cmstar.Serialization.Json.Contracts.ArrayContract.ElementContract"/> is not set up, a non-empty JSON array cannot be 
            deserialized and the <see cref="M:cmstar.Serialization.Json.JsonContract.Read(cmstar.Serialization.Json.JsonReader,cmstar.Serialization.Json.JsonDeserializingState)"/> method will throw an exception.
            </summary>
        </member>
        <member name="T:cmstar.Serialization.Json.Contracts.StringContract">
            <summary>
            The contract for strings.
            </summary>
        </member>
        <member name="T:cmstar.Serialization.Json.JsonConvert">
            <summary>
            Provides methods for converting between CLR types and JSON types.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonConvert.ToString(System.Object)">
            <summary>
            Converts an object to its JSON string representation.
            </summary>
            <param name="obj">The object.</param>
            <returns>The JSON string representation of the object.</returns>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonConvert.ToJsonDateTimeValue(System.DateTime,System.Boolean)">
            <summary>
            Convert a value of <see cref="T:System.DateTime"/> to a string representation 
            of a datetime in a JSON. 
            </summary>
            <param name="dateTime">
            The datetime value.
            If the kind of the datetime is not <see cref="F:System.DateTimeKind.Utc"/>,
            the result would contains a timezone offset.
            </param>
            <param name="wrappedInSlashes">
            Indicates whether to wrap the datetime value in a pair of slashes.
            If <c>true</c>, the datetime value will be in this format:'/Date(1xxxxxxxxxxxx+yyyy)/';
            otherwise, no prefix and surfix:'Date(1xxxxxxxxxxxx+yyyy)'.
            </param>
            <returns>A string represents a datetime value in a JSON.</returns>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonConvert.ClrTicksToJavascriptTicks(System.Int64)">
            <summary>
            Convert a number of ticks in the CLR to a number of ticks in Javascript.
            </summary>
            <param name="clrTicks">The number of ticks in the CLR.</param>
            <returns>The number of ticks in Javascript.</returns>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonConvert.JavascriptTicksToClrTicks(System.Int64)">
            <summary>
            Convert a number of ticks in Javascript to a number of ticks in the CLR.
            </summary>
            <param name="javascriptTicks">The number of ticks in Javascript.</param>
            <returns>The number of ticks in the CLR.</returns>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonConvert.TryParseJsonDateTimeValue(System.String,System.DateTime@)">
            <summary>
            Convert the string representation of a Javascript datetime value 
            to a <see cref="T:System.DateTime"/>.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">The string.</param>
            <param name="dateTime">
            The datetime result.
            The kind of datetime is <see cref="F:System.DateTimeKind.Local"/>.
            This is a output parameter.
            </param>
            <returns><c>true</c> if the convertion succeeded; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonConvert.TryGetDateDataIndexes(System.String,System.Int32@,System.Int32@)">
            \Date(1xxxxxxxxxxxx+yyyy)\
        </member>
        <member name="T:cmstar.Serialization.Json.JsonIgnoreAttribute">
            <summary>
            Instructs the <see cref="T:cmstar.Serialization.Json.JsonSerializer"/> not to write out 
            the value of a public field or property.
            </summary>
        </member>
        <member name="T:cmstar.Serialization.Json.JsonSerializingState">
            <summary>
            Keeps the state for serializing.
            </summary>
        </member>
        <member name="P:cmstar.Serialization.Json.JsonSerializingState.CheckCycleReference">
            <summary>
            Gets or sets a value that indicates whether to check for 
            the cycle reference during serailizing.
            </summary>
        </member>
        <member name="P:cmstar.Serialization.Json.JsonSerializingState.SerializingObjectStack">
            <summary>
            Gets a <see cref="T:System.Collections.Stack"/> storing the object references during serializing.
            </summary>
        </member>
        <member name="T:cmstar.Serialization.Json.JsonWriter">
            <summary>
            Represents a writer that provides forward-only means of generating JSON data.
            </summary>
        </member>
        <member name="F:cmstar.Serialization.Json.JsonWriter.Writer">
            <summary>
            The internal <see cref="T:System.IO.TextWriter"/> which the JSON is written to.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of <see cref="T:cmstar.Serialization.Json.JsonWriter"/> with the given 
            instance of <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">
            The instance of <see cref="T:System.IO.TextWriter"/> which the JSON is written to.
            </param>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonWriter.WriteObjectStart">
            <summary>
            Write a '{' which indicates a beginning of a JSON object.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonWriter.WriteObjectEnd">
            <summary>
            Write a '}' which indicates an end of a JSON object.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonWriter.WriteArrayStart">
            <summary>
            Write a '[' which indicates a beginning of a JSON array.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonWriter.WriteArrayEnd">
            <summary>
            Write a ']' which indicates a end of a JSON array.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonWriter.WritePropertyName(System.String)">
            <summary>
            Write a JSON property name like '"name":'.
            A <c>null</c> name is treated as an empty string.
            </summary>
            <param name="name">The property name.</param>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonWriter.WriteComma">
            <summary>
            Write a comma for properties or array elements.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonWriter.WriteUndefinedValue">
            <summary>
            Write a JSON 'undefined'.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonWriter.WriteNullValue">
            <summary>
            Write a JSON 'null'.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonWriter.WriteRawStringValue(System.String)">
            <summary>
            Write a string value which will not be escaped.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonWriter.WriteStringValue(System.String)">
            <summary>
            Write a string value, the value will be escaped.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonWriter.WriteBooleanValue(System.Boolean)">
            <summary>
            Write a boolean value (true/false).
            </summary>
            <param name="value">The boolean value.</param>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonWriter.WriteNumberValue(System.String)">
            <summary>
            Write a string value that represents a number.
            NULL will lead to a JSON 'null'.
            </summary>
            <param name="value">The value to be written.</param>
        </member>
        <member name="P:cmstar.Serialization.Json.JsonWriter.AutoCloseInternalWriter">
            <summary>
            Gets or sets a value that indicates whether to close the internal 
            <see cref="T:System.IO.TextWriter"/> when the <see cref="M:cmstar.Serialization.Json.JsonWriter.Dispose"/> method is called.
            The default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:cmstar.Serialization.Json.JsonWriter.EscapeSolidus">
            <summary>
            Indicates whether to escape the soliduses('/') in strings (to '\/').
            The default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:cmstar.Serialization.Json.JsonWriter.QuoteChar">
            <summary>
            Gets or sets the character used for a quote.
            </summary>
        </member>
        <member name="T:cmstar.Serialization.Json.JsonPropertyAttribute">
            <summary>
            Instructs the <see cref="T:cmstar.Serialization.Json.JsonSerializer"/> to always serialize the member with the specified name.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonPropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:cmstar.Serialization.Json.JsonPropertyAttribute"/> class.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:cmstar.Serialization.Json.JsonPropertyAttribute"/> class 
            with the specified name.
            </summary>
            <param name="propertyName">Name of the property/field.</param>
        </member>
        <member name="P:cmstar.Serialization.Json.JsonPropertyAttribute.PropertyName">
            <summary>
            Gets or sets the name of the class member.
            </summary>
            <value>The name of the class member.</value>
        </member>
        <member name="T:cmstar.Serialization.Json.JsonReader">
            <summary>
            A reader for reading a JSON from a <see cref="T:System.IO.TextReader"/>, 
            the reading action is forward-only.
            While reading a Json, the <see cref="T:cmstar.Serialization.Json.JsonReader"/> will validate the format,
            and throws <see cref="T:cmstar.Serialization.Json.JsonFormatException"/> if the format is not correct.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a instance of <see cref="T:cmstar.Serialization.Json.JsonReader"/> 
            and specified the internal instance of <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="textReader">
            The instance of <see cref="T:System.IO.TextReader"/> whith the JSON text is read from.
            </param>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonReader.PeekNextToken">
            <summary>
            Try to determind the next <see cref="T:cmstar.Serialization.Json.JsonToken"/> in the Json
            without changing current <see cref="T:cmstar.Serialization.Json.JsonToken"/> and value.
            </summary>
            <returns>
            The next <see cref="T:cmstar.Serialization.Json.JsonToken"/> in the JSON.
            Returns <see cref="F:cmstar.Serialization.Json.JsonToken.None"/> if the reader already reached the end.
            </returns>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonReader.Read">
            <summary>
            Reads next token from the JSON.
            </summary>
            <returns>
            <c>true</c> if a token was read; 
            otherwise <c>false</c>, it means the <see cref="T:cmstar.Serialization.Json.JsonReader"/> reached the end of the JSON.
            </returns>
        </member>
        <member name="P:cmstar.Serialization.Json.JsonReader.LineNumber">
            <summary>
            Gets the line number of current position 
            the <see cref="T:cmstar.Serialization.Json.JsonReader"/> reached in the JSON.
            </summary>
        </member>
        <member name="P:cmstar.Serialization.Json.JsonReader.ColumnNumber">
            <summary>
            Gets the column number of current position 
            the <see cref="T:cmstar.Serialization.Json.JsonReader"/> reached in the JSON.
            </summary>
        </member>
        <member name="P:cmstar.Serialization.Json.JsonReader.Token">
            <summary>
            Gets the <see cref="T:cmstar.Serialization.Json.JsonToken"/> finally read.
            The the <see cref="T:cmstar.Serialization.Json.JsonReader"/> has not started the read or has reached the end of the Json,
            <see cref="F:cmstar.Serialization.Json.JsonToken.None"/> would be returned.
            </summary>
        </member>
        <member name="P:cmstar.Serialization.Json.JsonReader.Containter">
            <summary>
            Gets the <see cref="T:cmstar.Serialization.Json.JsonToken"/> that indicates which JSON container the current position is in.
            </summary>
        </member>
        <member name="P:cmstar.Serialization.Json.JsonReader.Value">
            <summary>
            Gets the value finally read.
            </summary>
            <remarks>
            It's a <see cref="T:System.Boolean"/> if the value of the <see cref="P:cmstar.Serialization.Json.JsonReader.Token"/> property is <see cref="F:cmstar.Serialization.Json.JsonToken.BooleanValue"/>:
            and a <see cref="T:System.String"/> for <see cref="F:cmstar.Serialization.Json.JsonToken.StringValue"/>;
            a <see cref="T:System.Double"/> for <see cref="F:cmstar.Serialization.Json.JsonToken.NumberValue"/>;
            <c>NULL</c> for <see cref="F:cmstar.Serialization.Json.JsonToken.NullValue"/> and <see cref="F:cmstar.Serialization.Json.JsonToken.UndefinedValue"/>.
            
            If the <see cref="P:cmstar.Serialization.Json.JsonReader.Token"/> property is <see cref="F:cmstar.Serialization.Json.JsonToken.PropertyName"/>,
            the value is the propery name (a string).
             
            In other case, the value has no meaning.
            </remarks>
        </member>
        <member name="P:cmstar.Serialization.Json.JsonReader.AutoCloseInternalReader">
            <summary>
            Gets or sets a value that indicates whether to close the internal 
            <see cref="T:System.IO.TextReader"/> when the <see cref="M:cmstar.Serialization.Json.JsonReader.Dispose"/> method is called.
            The default value is <c>true</c>.
            </summary>
        </member>
        <member name="T:cmstar.Serialization.Json.JsonSerializer">
            <summary>
            Serializes and deserializes objects into and from the JSON format.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:cmstar.Serialization.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonSerializer.#ctor(cmstar.Serialization.Json.IJsonContractResolver)">
            <summary>
            Initializes a new instance of <see cref="T:cmstar.Serialization.Json.JsonSerializer"/>
            with the given implemntation of <see cref="T:cmstar.Serialization.Json.IJsonContractResolver"/>.
            </summary>
            <param name="contractResolver">
            The implemntation of <see cref="T:cmstar.Serialization.Json.IJsonContractResolver"/> which is used for
            resolving <see cref="T:cmstar.Serialization.Json.JsonContract"/>s for objects.
            </param>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonSerializer.Serialize(System.Object)">
            <summary>
            Serializes the given object to a JSON.
            </summary>
            <param name="obj">The object to be serialized.</param>
            <returns>The JSON string.</returns>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonSerializer.Serialize(System.Object,cmstar.Serialization.Formatting)">
            <summary>
            Serializes the given object to a JSON with given <see cref="T:cmstar.Serialization.Formatting"/>.
            </summary>
            <param name="obj">The object to be serialized.</param>
            <param name="formatting">The value of <see cref="T:cmstar.Serialization.Formatting"/>.</param>
            <returns>The JSON string.</returns>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonSerializer.Serialize(System.Object,cmstar.Serialization.Json.JsonWriter)">
            <summary>
            Serialized the given object to a JSON 
            and writes the JSON to the specified <see cref="T:cmstar.Serialization.Json.JsonWriter"/>.
            </summary>
            <param name="obj">The object to be serialized.</param>
            <param name="jsonWriter">
            The instance of <see cref="T:cmstar.Serialization.Json.JsonWriter"/> which the JSON will be written to.
            It will not be disposed automatically after the method call.
            </param>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonSerializer.Serialize(System.Object,System.IO.TextWriter)">
            <summary>
            Serialized the given object to a JSON 
            and writes the JSON to the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="obj">The object to be serialized.</param>
            <param name="textWriter">
            The instance of <see cref="T:System.IO.TextWriter"/> which the JSON will be written to.
            It will not be disposed automatically after the method call.
            </param>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonSerializer.FastSerialize(System.Object)">
            <summary>
            Serializes the given object to a JSON.
            This is a faster version than <see cref="M:cmstar.Serialization.Json.JsonSerializer.Serialize(System.Object)"/>. It does not include
            the validation of JSON format and the check of cycle reference.
            </summary>
            <param name="obj">The object to be serialized.</param>
            <returns>The JSON string.</returns>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonSerializer.Deserialize``1(System.String)">
            <summary>
            Deserializes a string which represents a JSON to a CLR object.
            </summary>
            <typeparam name="T">The type of the CLR object.</typeparam>
            <param name="json">The JSON.</param>
            <returns>The object deserialized from the JSON.</returns>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonSerializer.Deserialize``1(System.String,``0)">
            <summary>
            Deserializes a string which represents a JSON to a CLR object,
            and specifies a template object which is used to be an anonymous object.
            </summary>
            <typeparam name="T">The type of the CLR object.</typeparam>
            <param name="json">The JSON.</param>
            <param name="template">The template object for the deserialization.</param>
            <returns>The object deserialized from the JSON.</returns>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonSerializer.Deserialize(System.String,System.Type)">
            <summary>
            Deserializes a string which represents a JSON to a CLR object.
            </summary>
            <param name="json">The JSON.</param>
            <param name="type">The type of the CLR object.</param>
            <returns>The object deserialized from the JSON.</returns>
        </member>
        <member name="M:cmstar.Serialization.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes a JSON read from a <see cref="T:System.IO.TextReader"/> to a CLR object.
            </summary>
            <param name="textReader">The <see cref="T:System.IO.TextReader"/> from which to read the JSON.</param>
            <param name="type">The type of the CLR object.</param>
            <returns>The object deserialized from the JSON.</returns>
        </member>
        <member name="P:cmstar.Serialization.Json.JsonSerializer.Default">
            <summary>
            Gets the default instance of <see cref="T:cmstar.Serialization.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:cmstar.Serialization.Json.JsonSerializer.ContractResolver">
            <summary>
            Gets the <see cref="T:cmstar.Serialization.Json.IJsonContractResolver"/> for the <see cref="T:cmstar.Serialization.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:cmstar.Serialization.Json.JsonSerializer.CheckCycleReference">
            <summary>
            Indicates whether to enable the cycle reference checking.
            The default value is false.
            </summary>
        </member>
        <member name="T:cmstar.Serialization.Json.JsonToken">
            <summary>
            Defines tokens in JSONs.
            </summary>
        </member>
        <member name="F:cmstar.Serialization.Json.JsonToken.None">
            <summary>
            The token is used for <see cref="T:cmstar.Serialization.Json.JsonWriter"/> when the methods have not been called;
            or for <see cref="T:cmstar.Serialization.Json.JsonReader"/> when the reader is not started or has passed the end of JSON.
            </summary>
        </member>
        <member name="F:cmstar.Serialization.Json.JsonToken.ObjectStart">
            <summary>
            The start of a JSON object ('{').
            </summary>
        </member>
        <member name="F:cmstar.Serialization.Json.JsonToken.ObjectEnd">
            <summary>
            The end of a JSON object ('}').
            </summary>
        </member>
        <member name="F:cmstar.Serialization.Json.JsonToken.ArrayStart">
            <summary>
            The start of a JSON array ('[').
            </summary>
        </member>
        <member name="F:cmstar.Serialization.Json.JsonToken.ArrayEnd">
            <summary>
            The start of a JSON array (']').
            </summary>
        </member>
        <member name="F:cmstar.Serialization.Json.JsonToken.PropertyName">
            <summary>
            A JSON object property.
            </summary>
        </member>
        <member name="F:cmstar.Serialization.Json.JsonToken.NullValue">
            <summary>
            The token for javascript null.
            </summary>
        </member>
        <member name="F:cmstar.Serialization.Json.JsonToken.StringValue">
            <summary>
            The token for strings.
            </summary>
        </member>
        <member name="F:cmstar.Serialization.Json.JsonToken.NumberValue">
            <summary>
            The token for numbers.
            </summary>
        </member>
        <member name="F:cmstar.Serialization.Json.JsonToken.BooleanValue">
            <summary>
            The token for boolean values.
            </summary>
        </member>
        <member name="F:cmstar.Serialization.Json.JsonToken.UndefinedValue">
            <summary>
            The token for javascript 'undefined'.
            </summary>
        </member>
        <member name="F:cmstar.Serialization.Json.JsonToken.Comma">
            <summary>
            The comma used for separating the array elements or properties.
            </summary>
        </member>
        <member name="T:cmstar.Serialization.Json.JsonWriterImproved">
            <summary>
            Represents a writer that provides non-cached and forward-only means of 
            generating JSON data.
            This writer is an improved implementation of <see cref="T:cmstar.Serialization.Json.JsonWriter"/>,
            it can validate the JSON data being written, throws <see cref="T:cmstar.Serialization.Json.JsonFormatException"/> 
            on invalid data, and provides the ability of formatting the JSON text automatically.
            </summary>
        </member>
        <member name="T:cmstar.Serialization.Json.Contracts.NumberContract">
            <summary>
            The contract for numbers.
            </summary>
        </member>
        <member name="T:cmstar.Serialization.Json.Contracts.ObjectContract">
            <summary>
            The <see cref="T:cmstar.Serialization.Json.JsonContract"/> for objects or stucts.
            The contract maps propertys in JSON from/to propertys/fields of CLR objects.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.Json.Contracts.ObjectContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:cmstar.Serialization.Json.Contracts.ObjectContract"/>
            with the given underlying type.
            </summary>
            <param name="type">The underlying type.</param>
        </member>
        <member name="M:cmstar.Serialization.Json.Contracts.ObjectContract.#ctor(System.Type,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of <see cref="T:cmstar.Serialization.Json.Contracts.ObjectContract"/>
            with the given underlying type.
            </summary>
            <param name="type">The underlying type.</param>
            <param name="memberNameComparer"></param>
        </member>
        <member name="P:cmstar.Serialization.Json.Contracts.ObjectContract.Members">
            <summary>
            Gets the colleciton of <see cref="T:cmstar.Serialization.Json.Contracts.ContractMemberInfo"/> which describes
            how to serialize the properties or fields of the underlying type.
            </summary>
        </member>
        <member name="T:cmstar.Serialization.IndentedTextWriter">
            <summary>
            Provides a text writer that can indent new lines.
            </summary>
        </member>
        <member name="F:cmstar.Serialization.IndentedTextWriter.MaxIndentLevel">
            <summary>
            The max indent level allowed in the <see cref="T:cmstar.Serialization.IndentedTextWriter"/>.
            </summary>
        </member>
        <member name="F:cmstar.Serialization.IndentedTextWriter.DefaultIndentMark">
            <summary>
            The default string for indentations.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.IndentedTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:cmstar.Serialization.IndentedTextWriter"/> 
            using the specified text writer and default indent mark.
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> for output.</param>
        </member>
        <member name="M:cmstar.Serialization.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:cmstar.Serialization.IndentedTextWriter"/> 
            using the specified text writer and indent mark.
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> for output.</param>
            <param name="indentMark">The indent mark used for indentations.</param>
        </member>
        <member name="M:cmstar.Serialization.IndentedTextWriter.IndentIncrease">
            <summary>
            Increases the indent level by 1.
            The indent level will not change if already reached the <see cref="F:cmstar.Serialization.IndentedTextWriter.MaxIndentLevel"/>.
            </summary>
        </member>
        <member name="M:cmstar.Serialization.IndentedTextWriter.IndentDecrease">
            <summary>
            Decreases the indent level by 1.
            The indent level will not change if it is zero.
            </summary>
        </member>
        <member name="P:cmstar.Serialization.IndentedTextWriter.IndentMark">
            <summary>
            Gets the string used for indentations in the <see cref="T:cmstar.Serialization.IndentedTextWriter"/>。
            </summary>
        </member>
        <member name="P:cmstar.Serialization.IndentedTextWriter.IndentLevel">
            <summary>
            Gets the indent level.
            </summary>
        </member>
    </members>
</doc>
